name: automation

x-shared: &shared-chatwoot
  image: chatwoot/chatwoot:${CHATWOOT_VERSION}
  restart: always
  volumes:
    - ${DATA_DIR}/storage:/app/storage
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy

services:
  nginx:
    image: nginx:mainline-alpine3.18-slim
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/snippets:/etc/nginx/snippets
      - /etc/letsencrypt:/etc/letsencrypt:ro
    networks:
      - automation_network
    depends_on:
      - rails
      - n8n
      - evolution

  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_MULTIPLE_DATABASES=${POSTGRES_MULTIPLE_DATABASES}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
    networks:
      - automation_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:${REDIS_VERSION}
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - automation_network
    healthcheck:
      test: redis-cli -a ${REDIS_PASSWORD} ping | grep PONG
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  n8n:
    image: n8nio/n8n:${N8N_VERSION}
    restart: unless-stopped
    environment:
      - N8N_HOST=${DOMAIN}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_PATH=/n8n/
      - N8N_EDITOR_BASE_URL=https://${DOMAIN}/n8n/
      - N8N_WEBHOOK_URL=https://${DOMAIN}/n8n/
      - N8N_USER_MANAGEMENT_DISABLED=false
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${N8N_POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - NODE_ENV=production
      - N8N_EMAIL_MODE=smtp
      - N8N_SMTP_HOST=${SMTP_ADDRESS}
      - N8N_SMTP_PORT=${SMTP_PORT}
      - N8N_SMTP_USER=${SMTP_USERNAME}
      - N8N_SMTP_PASS=${SMTP_PASSWORD}
      - N8N_SMTP_SENDER=${MAILER_SENDER_EMAIL}
      - N8N_PERSONALIZATION_ENABLED=true
      - WEBHOOK_TUNNEL_URL=https://${DOMAIN}/n8n/
      - GENERIC_TIMEZONE=${TIMEZONE}
      - TZ=${TIMEZONE}
      - N8N_DEFAULT_LOCALE=es
    volumes:
      - n8n_storage:/home/node/.n8n
    networks:
      - automation_network
    depends_on:
      - postgres

  evolution:
    container_name: evolution
    image: atendai/evolution-api:${EVOLUTION_VERSION}
    restart: always
    environment:
      - SERVER_URL=https://${DOMAIN}/wa
      - AUTHENTICATION_API_KEY=${EVOLUTION_API_KEY}
      - AUTHENTICATION_TYPE=apikey
      # Database Configuration
      - DATABASE_ENABLED=true
      - DATABASE_PROVIDER=postgresql
      - DATABASE_CONNECTION_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${EVOLUTION_DB}
      - DATABASE_SAVE_DATA_INSTANCE=true
      - DATABASE_SAVE_DATA_NEW_MESSAGE=true
      - DATABASE_SAVE_MESSAGE_UPDATE=true
      - DATABASE_SAVE_DATA_CONTACTS=true
      - DATABASE_SAVE_DATA_CHATS=true
      - DATABASE_SAVE_DATA_LABELS=true
      - DATABASE_SAVE_DATA_HISTORIC=true
      - DATABASE_CONNECTION_CLIENT_NAME=evolution
      # Redis Configuration
      - CACHE_REDIS_ENABLED=true
      - CACHE_REDIS_URI=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CACHE_REDIS_PREFIX_KEY=evolution
      - CACHE_REDIS_SAVE_INSTANCES=false
      - CACHE_LOCAL_ENABLED=false
      # General Configuration
      - DEL_INSTANCE=false
      - LOG_LEVEL=ERROR
    volumes:
      - evolution_instances:/evolution/instances
      - evolution_store:/evolution/store
    networks:
      - automation_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  rails:
    <<: *shared-chatwoot
    container_name: rails
    command: ["bundle", "exec", "rails", "s", "-p", "3000", "-b", "0.0.0.0"]
    environment:
      - NODE_ENV=${NODE_ENV}
      - RAILS_ENV=${RAILS_ENV}
      - INSTALLATION_ENV=${INSTALLATION_ENV}
      - FRONTEND_URL=https://${DOMAIN}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - POSTGRES_HOST=postgres
      - POSTGRES_USERNAME=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${CHATWOOT_DB}
      - SMTP_DOMAIN=mibot.cl
      - SMTP_ADDRESS=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USERNAME=
      - SMTP_PASSWORD=
      - SMTP_AUTHENTICATION=plain
      - SMTP_ENABLE_STARTTLS_AUTO=true
      - SMTP_OPENSSL_VERIFY_MODE=none
      - INSTALLATION_NAME="MiBot Support"
      - DEFAULT_LOCALE=es
      - ENABLE_ACCOUNT_SIGNUP=false
      - FORCE_SSL=true
      - RAILS_MAX_THREADS=5
      - TIMEZONE=${TIMEZONE}
    networks:
      - automation_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data: {}
  redis_data: {}
  n8n_storage: {}
  chatwoot_storage: {}
  evolution_instances: {}
  evolution_store: {}

networks:
  automation_network:
    driver: bridge
